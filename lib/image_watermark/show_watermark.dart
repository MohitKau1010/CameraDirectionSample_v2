import 'dart:io';
import 'dart:typed_data';
import 'dart:math' as math;
import 'package:flutter/cupertino.dart';
import 'package:cross_file/cross_file.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class ImageScreen extends StatefulWidget {
  File? imagePath;
  Uint8List mapImage = Uint8List.fromList([137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 217, 0, 0, 1, 241, 8, 6, 0, 0, 0, 184, 90, 160, 88, 0, 0, 0, 4, 115, 66, 73, 84, 8, 8, 8, 8, 124, 8, 100, 136, 0, 0, 9, 219, 73, 68, 65, 84, 120, 156, 237, 214, 193, 9, 128, 64, 16, 192, 192, 85, 236, 191, 38, 59, 91, 155, 8, 28, 200, 76, 5, 121, 230, 218, 221, 29, 0, 0, 32, 115, 159, 14, 0, 0, 128, 191, 49, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 51, 217, 0, 0, 16, 123, 102, 230, 61, 29, 1, 0, 0, 127, 242, 1, 148, 158, 8, 160, 253, 173, 245, 134, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);

  // File watermarkedImage;
  ImageScreen(this.imagePath, this.mapImage, {super.key});

  @override
  State<ImageScreen> createState() => _ImageScreenState();
}

class _ImageScreenState extends State<ImageScreen> {
  double _rotation = 0.0;
  bool _isFlipped = false;

  void _rotateImage() {
    setState(() {
      _rotation += 90.0;
      if (_rotation == 360.0) {
        _rotation = 0.0;
      }
    });
  }

  // Replace with your file path
  void _flipImage() {
    setState(() {
      _isFlipped = !_isFlipped;
    });
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp, DeviceOrientation.portraitDown]);
    return Scaffold(
        appBar: AppBar(title: const Text('View Image'), actions: <Widget>[
          InkWell(
              onTap: _rotateImage,
              child: Container(
                  margin: const EdgeInsets.all(10.0),
                  padding: const EdgeInsets.all(5.0),
                  decoration: BoxDecoration(border: Border.all(color: Colors.white)),
                  child: const Text("Rotate Image", style: TextStyle(backgroundColor: Colors.black))))
        ]),

        body: SingleChildScrollView(
            child: Stack(
          children: [
            Visibility(
              visible: widget.imagePath!=null,
              child: Container(
                height: MediaQuery.of(context).size.height * 0.75,
                width: MediaQuery.of(context).size.width,
                child: InteractiveViewer(
                    panEnabled: true,
                    minScale: 0.5,
                    maxScale: 4.0,
                    child: Transform(
                      alignment: Alignment.center,
                      transform: Matrix4.rotationZ(_rotation * 3.1415927 / 180)..scale(_isFlipped ? -1.0 : 1.0, 1.0),
                      child: Image.file(widget.imagePath!,
                          fit: BoxFit.fitWidth,
                          // Set the alignment of image
                          alignment: Alignment.center),
                    )),
              ),
            ),
            Column(children: [
              SizedBox(height: MediaQuery.of(context).size.height * 0.75),
              Align(
                alignment: Alignment.centerRight,
                child: InkWell(
                    onTap: _rotateImage,
                    child: Container(
                      height: MediaQuery.of(context).size.height * 0.15,
                      child: InteractiveViewer(
                          panEnabled: true,
                          minScale: 0.5,
                          maxScale: 4.0,
                          child: Image.memory(widget.mapImage,
                              fit: BoxFit.cover,
                              // Set the alignment of image..
                              alignment: Alignment.center)),
                    )),
              ),
            ])
          ],
        )));
  }

  Future<ImageProvider> xFileToImage(XFile xFile) async {
    final Uint8List bytes = await xFile.readAsBytes();
    return Image.memory(bytes).image;
  }
}
